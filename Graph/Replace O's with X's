class Solution{
    static char[][] fill(int n, int m, char a[][])
    {
        boolean[][] v=new boolean[n][m];
        Queue<int[]> q=new LinkedList<>();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0||j==0||i==n-1||j==m-1){
                    if(a[i][j]=='O')
                    q.add(new int[]{i,j});
                }
            }
        }
        int x[]={-1,1,0,0};
        int y[]={0,0,-1,1};
        while(!q.isEmpty()){
            int t[]=q.remove();
            v[t[0]][t[1]]=true;
            for(int i=0;i<4;i++){
                int dx=t[0]+x[i];
                int dy=t[1]+y[i];
                if(dx>=0&&dx<n&&dy>=0&&dy<m&&!v[dx][dy]&&a[dx][dy]=='O'){
                    v[dx][dy]=true;
                    q.add(new int[]{dx,dy});
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!v[i][j] && a[i][j]=='O')
                a[i][j]='X';
            }
        }
        return a;
    }
}
